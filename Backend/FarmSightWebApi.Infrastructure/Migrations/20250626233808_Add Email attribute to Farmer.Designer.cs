// <auto-generated />
using System;
using FarmSightWebApi.Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FarmSightWebApi.Infrastructure.Migrations
{
    [DbContext(typeof(FarmSightDbContext))]
    [Migration("20250626233808_Add Email attribute to Farmer")]
    partial class AddEmailattributetoFarmer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AlertLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<int>("Medium")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Alerts", (string)null);
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.BenchmarkSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AvgMoisture")
                        .HasColumnType("real");

                    b.Property<float>("AvgNDVI")
                        .HasColumnType("real");

                    b.Property<string>("CropType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FieldCount")
                        .HasColumnType("integer");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Benchmark_Snapshots", (string)null);
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.CropCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("HarvestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDynamic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SowingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WeatherNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId")
                        .IsUnique();

                    b.ToTable("CropCalendars", (string)null);
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.EOData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("DroughtIndex")
                        .HasColumnType("real");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<float>("FloodRisk")
                        .HasColumnType("real");

                    b.Property<float>("NDVI")
                        .HasColumnType("real");

                    b.Property<float>("Rainfall")
                        .HasColumnType("real");

                    b.Property<float>("SoilMoisture")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("EOData", (string)null);
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.Farmer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Farmers", (string)null);
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AreaHa")
                        .HasColumnType("double precision");

                    b.Property<double>("CenterLat")
                        .HasColumnType("double precision");

                    b.Property<double>("CenterLng")
                        .HasColumnType("double precision");

                    b.Property<string>("CropType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FarmerId")
                        .HasColumnType("uuid");

                    b.Property<double>("Lat1")
                        .HasColumnType("double precision");

                    b.Property<double>("Lat2")
                        .HasColumnType("double precision");

                    b.Property<double>("Lat3")
                        .HasColumnType("double precision");

                    b.Property<double>("Lat4")
                        .HasColumnType("double precision");

                    b.Property<double>("Lng1")
                        .HasColumnType("double precision");

                    b.Property<double>("Lng2")
                        .HasColumnType("double precision");

                    b.Property<double>("Lng3")
                        .HasColumnType("double precision");

                    b.Property<double>("Lng4")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.ToTable("Fields", (string)null);
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.MessageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FarmerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<int>("Medium")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("FieldId");

                    b.ToTable("Message_Logs", (string)null);
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.YieldForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Confidence")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("ExpectedYield")
                        .HasColumnType("real");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ForecastDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MarketTip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Yield_Forecasts", (string)null);
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FarmerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.Alert", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Entities.Field", "FarmField")
                        .WithMany("Alerts")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FarmField");
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.CropCalendar", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Entities.Field", "FarmField")
                        .WithOne("CropCalendar")
                        .HasForeignKey("FarmSightWebApi.ApplicationCore.Domain.Entities.CropCalendar", "FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FarmField");
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.EOData", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Entities.Field", "FarmField")
                        .WithMany("EOData")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FarmField");
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.Field", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Entities.Farmer", "Farmer")
                        .WithMany("Fields")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.MessageLog", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Entities.Farmer", "Farmer")
                        .WithMany("Messages")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Entities.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");

                    b.Navigation("Farmer");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.YieldForecast", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Entities.Field", "Field")
                        .WithMany("YieldForecasts")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Entities.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FarmSightWebApi.ApplicationCore.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.Farmer", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("FarmSightWebApi.ApplicationCore.Domain.Entities.Field", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("CropCalendar")
                        .IsRequired();

                    b.Navigation("EOData");

                    b.Navigation("YieldForecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
